/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as BillingImport } from './routes/_billing'
import { Route as BaseImport } from './routes/_base'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthLoginImport } from './routes/auth.login'
import { Route as BillingSubscriptionsImport } from './routes/_billing.subscriptions'
import { Route as BaseMessagesImport } from './routes/_base.messages'
import { Route as BaseManageImport } from './routes/_base.manage'
import { Route as BaseImportImport } from './routes/_base.import'
import { Route as BaseDashboardImport } from './routes/_base.dashboard'
import { Route as BaseMessagesIdImport } from './routes/_base.messages_.$id'
import { Route as BaseManageIdImport } from './routes/_base.manage_.$id'

// Create/Update Routes

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const BillingRoute = BillingImport.update({
  id: '/_billing',
  getParentRoute: () => rootRoute,
} as any)

const BaseRoute = BaseImport.update({
  id: '/_base',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const BillingSubscriptionsRoute = BillingSubscriptionsImport.update({
  id: '/subscriptions',
  path: '/subscriptions',
  getParentRoute: () => BillingRoute,
} as any)

const BaseMessagesRoute = BaseMessagesImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => BaseRoute,
} as any)

const BaseManageRoute = BaseManageImport.update({
  id: '/manage',
  path: '/manage',
  getParentRoute: () => BaseRoute,
} as any)

const BaseImportRoute = BaseImportImport.update({
  id: '/import',
  path: '/import',
  getParentRoute: () => BaseRoute,
} as any)

const BaseDashboardRoute = BaseDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => BaseRoute,
} as any)

const BaseMessagesIdRoute = BaseMessagesIdImport.update({
  id: '/messages_/$id',
  path: '/messages/$id',
  getParentRoute: () => BaseRoute,
} as any)

const BaseManageIdRoute = BaseManageIdImport.update({
  id: '/manage_/$id',
  path: '/manage/$id',
  getParentRoute: () => BaseRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_base': {
      id: '/_base'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BaseImport
      parentRoute: typeof rootRoute
    }
    '/_billing': {
      id: '/_billing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BillingImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/_base/dashboard': {
      id: '/_base/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof BaseDashboardImport
      parentRoute: typeof BaseImport
    }
    '/_base/import': {
      id: '/_base/import'
      path: '/import'
      fullPath: '/import'
      preLoaderRoute: typeof BaseImportImport
      parentRoute: typeof BaseImport
    }
    '/_base/manage': {
      id: '/_base/manage'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof BaseManageImport
      parentRoute: typeof BaseImport
    }
    '/_base/messages': {
      id: '/_base/messages'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof BaseMessagesImport
      parentRoute: typeof BaseImport
    }
    '/_billing/subscriptions': {
      id: '/_billing/subscriptions'
      path: '/subscriptions'
      fullPath: '/subscriptions'
      preLoaderRoute: typeof BillingSubscriptionsImport
      parentRoute: typeof BillingImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/_base/manage_/$id': {
      id: '/_base/manage_/$id'
      path: '/manage/$id'
      fullPath: '/manage/$id'
      preLoaderRoute: typeof BaseManageIdImport
      parentRoute: typeof BaseImport
    }
    '/_base/messages_/$id': {
      id: '/_base/messages_/$id'
      path: '/messages/$id'
      fullPath: '/messages/$id'
      preLoaderRoute: typeof BaseMessagesIdImport
      parentRoute: typeof BaseImport
    }
  }
}

// Create and export the route tree

interface BaseRouteChildren {
  BaseDashboardRoute: typeof BaseDashboardRoute
  BaseImportRoute: typeof BaseImportRoute
  BaseManageRoute: typeof BaseManageRoute
  BaseMessagesRoute: typeof BaseMessagesRoute
  BaseManageIdRoute: typeof BaseManageIdRoute
  BaseMessagesIdRoute: typeof BaseMessagesIdRoute
}

const BaseRouteChildren: BaseRouteChildren = {
  BaseDashboardRoute: BaseDashboardRoute,
  BaseImportRoute: BaseImportRoute,
  BaseManageRoute: BaseManageRoute,
  BaseMessagesRoute: BaseMessagesRoute,
  BaseManageIdRoute: BaseManageIdRoute,
  BaseMessagesIdRoute: BaseMessagesIdRoute,
}

const BaseRouteWithChildren = BaseRoute._addFileChildren(BaseRouteChildren)

interface BillingRouteChildren {
  BillingSubscriptionsRoute: typeof BillingSubscriptionsRoute
}

const BillingRouteChildren: BillingRouteChildren = {
  BillingSubscriptionsRoute: BillingSubscriptionsRoute,
}

const BillingRouteWithChildren =
  BillingRoute._addFileChildren(BillingRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof BillingRouteWithChildren
  '/reset-password': typeof ResetPasswordRoute
  '/dashboard': typeof BaseDashboardRoute
  '/import': typeof BaseImportRoute
  '/manage': typeof BaseManageRoute
  '/messages': typeof BaseMessagesRoute
  '/subscriptions': typeof BillingSubscriptionsRoute
  '/auth/login': typeof AuthLoginRoute
  '/manage/$id': typeof BaseManageIdRoute
  '/messages/$id': typeof BaseMessagesIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof BillingRouteWithChildren
  '/reset-password': typeof ResetPasswordRoute
  '/dashboard': typeof BaseDashboardRoute
  '/import': typeof BaseImportRoute
  '/manage': typeof BaseManageRoute
  '/messages': typeof BaseMessagesRoute
  '/subscriptions': typeof BillingSubscriptionsRoute
  '/auth/login': typeof AuthLoginRoute
  '/manage/$id': typeof BaseManageIdRoute
  '/messages/$id': typeof BaseMessagesIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRoute
  '/_base': typeof BaseRouteWithChildren
  '/_billing': typeof BillingRouteWithChildren
  '/reset-password': typeof ResetPasswordRoute
  '/_base/dashboard': typeof BaseDashboardRoute
  '/_base/import': typeof BaseImportRoute
  '/_base/manage': typeof BaseManageRoute
  '/_base/messages': typeof BaseMessagesRoute
  '/_billing/subscriptions': typeof BillingSubscriptionsRoute
  '/auth/login': typeof AuthLoginRoute
  '/_base/manage_/$id': typeof BaseManageIdRoute
  '/_base/messages_/$id': typeof BaseMessagesIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/reset-password'
    | '/dashboard'
    | '/import'
    | '/manage'
    | '/messages'
    | '/subscriptions'
    | '/auth/login'
    | '/manage/$id'
    | '/messages/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/reset-password'
    | '/dashboard'
    | '/import'
    | '/manage'
    | '/messages'
    | '/subscriptions'
    | '/auth/login'
    | '/manage/$id'
    | '/messages/$id'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_base'
    | '/_billing'
    | '/reset-password'
    | '/_base/dashboard'
    | '/_base/import'
    | '/_base/manage'
    | '/_base/messages'
    | '/_billing/subscriptions'
    | '/auth/login'
    | '/_base/manage_/$id'
    | '/_base/messages_/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRoute
  BaseRoute: typeof BaseRouteWithChildren
  BillingRoute: typeof BillingRouteWithChildren
  ResetPasswordRoute: typeof ResetPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRoute,
  BaseRoute: BaseRouteWithChildren,
  BillingRoute: BillingRouteWithChildren,
  ResetPasswordRoute: ResetPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/_base",
        "/_billing",
        "/reset-password",
        "/auth/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx"
    },
    "/_base": {
      "filePath": "_base.tsx",
      "children": [
        "/_base/dashboard",
        "/_base/import",
        "/_base/manage",
        "/_base/messages",
        "/_base/manage_/$id",
        "/_base/messages_/$id"
      ]
    },
    "/_billing": {
      "filePath": "_billing.tsx",
      "children": [
        "/_billing/subscriptions"
      ]
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/_base/dashboard": {
      "filePath": "_base.dashboard.tsx",
      "parent": "/_base"
    },
    "/_base/import": {
      "filePath": "_base.import.tsx",
      "parent": "/_base"
    },
    "/_base/manage": {
      "filePath": "_base.manage.tsx",
      "parent": "/_base"
    },
    "/_base/messages": {
      "filePath": "_base.messages.tsx",
      "parent": "/_base"
    },
    "/_billing/subscriptions": {
      "filePath": "_billing.subscriptions.tsx",
      "parent": "/_billing"
    },
    "/auth/login": {
      "filePath": "auth.login.tsx"
    },
    "/_base/manage_/$id": {
      "filePath": "_base.manage_.$id.tsx",
      "parent": "/_base"
    },
    "/_base/messages_/$id": {
      "filePath": "_base.messages_.$id.tsx",
      "parent": "/_base"
    }
  }
}
ROUTE_MANIFEST_END */
